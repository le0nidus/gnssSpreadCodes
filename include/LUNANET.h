#ifndef LUNANET_HEADER
#define LUNANET_HEADER

#include <unordered_map>
#include "Constellation.h"

constexpr int LUNANET_NUMBER_OF_SATS = 210;
constexpr int LUNANET_AFSI_CODE_LENGTH = 2046;
constexpr int LUNANET_AFSI_TAPS_G1 = 1026;
constexpr int LUNANET_AFSI_TAPS_G2 = 1170;
constexpr int LUNANET_AFSI_NUM_REGISTERS_IN_G2 = 11;

constexpr int LUNANET_PRIMARY_WEIL_N = 10223;
constexpr int LUNANET_AFSQ_PRIMARY_CODE_LENGTH = 10230;

constexpr int LUNANET_TRIETARY_WEIL_N = 1499;
constexpr int LUNANET_AFSQ_TRIETARY_CODE_LENGTH = 1500;

class LunaNet : public Constellation {
public:
	LunaNet() {
        residuePrimary = residueCalculator(LUNANET_PRIMARY_WEIL_N);
        legendrePrimary = generateLegendreSequence(LUNANET_PRIMARY_WEIL_N, residuePrimary);
        residueTrietary = residueCalculator(LUNANET_TRIETARY_WEIL_N);
        legendreTrietary = generateLegendreSequence(LUNANET_TRIETARY_WEIL_N, residueTrietary);
	}
	void afs_i(int prn);
    void afs_q_primary(int prn);
    void afs_q_trietary(int prn);
	

private:

    std::string getConstellationName() override { return "Luna Net"; }
    int getNumberOfSats() override { return LUNANET_NUMBER_OF_SATS; }

	std::vector<int> afs_i_g1_init = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    std::vector<int> residuePrimary;
    std::vector<int> legendrePrimary;
    std::vector<int> residueTrietary;
    std::vector<int> legendreTrietary;
    const std::vector<int> insertion_afs_q_primary = {0, 1, 1, 0, 1, 0, 0};

// Tables for AFS-I
const std::unordered_map<int, int> g2RegisterInit = {
    {1,   0x514}, {2,   0x59E}, {3,   0x49A}, {4,   0x346},
    {5,   0x78B}, {6,   0x341}, {7,   0x17D}, {8,   0x7AB},
    {9,   0x301}, {10,  0x32E}, {11,  0x4DE}, {12,  0x29C},
    {13,  0x4ED}, {14,  0x506}, {15,  0x30E}, {16,  0x230},
    {17,  0x270}, {18,  0x38D}, {19,  0x2DC}, {20,  0x5C8},
    {21,  0x61E}, {22,  0x72C}, {23,  0x54B}, {24,  0x77C},
    {25,  0x32F}, {26,  0x600}, {27,  0x635}, {28,  0x4B7},
    {29,  0x73D}, {30,  0x4BE}, {31,  0x55F}, {32,  0x775},
    {33,  0x424}, {34,  0x603}, {35,  0x450}, {36,  0x0AB},
    {37,  0x316}, {38,  0x44F}, {39,  0x477}, {40,  0x76F},
    {43,  0x6BE}, {44,  0x6EB}, {45,  0x336}, {46,  0x650},
    {47,  0x59C}, {48,  0x74F}, {49,  0x294}, {50,  0x03F},
    {51,  0x5AB}, {52,  0x4F2}, {53,  0x647}, {54,  0x494},
    {55,  0x521}, {56,  0x53D}, {57,  0x4DF}, {58,  0x4A2},
    {59,  0x2C3}, {60,  0x15F}, {61,  0x3A2}, {62,  0x2C9},
    {63,  0x329}, {64,  0x214}, {65,  0x532}, {66,  0x733},
    {67,  0x697}, {68,  0x6DD}, {69,  0x2FC}, {70,  0x471},
    {71,  0x42B}, {72,  0x706}, {73,  0x52F}, {74,  0x77F},
    {75,  0x526}, {76,  0x7FB}, {77,  0x220}, {78,  0x13C},
    {79,  0x65F}, {80,  0x7E3}, {81,  0x254}, {82,  0x444},
    {83,  0x041}, {84,  0x542}, {85,  0x6EF}, {86,  0x4F6},
    {87,  0x7C8}, {88,  0x45F}, {89,  0x654}, {90,  0x659},
    {91,  0x486}, {92,  0x72A}, {93,  0x191}, {94,  0x68D},
    {95,  0x0CD}, {96,  0x5FE}, {97,  0x604}, {98,  0x282},
    {99,  0x36D}, {100, 0x231}, {101, 0x655}, {102, 0x1FF},
    {103, 0x6FB}, {104, 0x41F}, {105, 0x6AC}, {106, 0x026},
    {107, 0x298}, {108, 0x612}, {109, 0x1D0}, {110, 0x2C7},
    {111, 0x534}, {112, 0x7BE}, {113, 0x7DA}, {114, 0x51D},
    {115, 0x39A}, {116, 0x786}, {117, 0x354}, {118, 0x5A4},
    {119, 0x1A4}, {120, 0x529}, {121, 0x4CE}, {122, 0x5F2},
    {123, 0x2B0}, {124, 0x30D}, {125, 0x621}, {126, 0x572},
    {127, 0x455}, {128, 0x4C5}, {129, 0x51E}, {130, 0x676},
    {131, 0x53C}, {132, 0x726}, {133, 0x410}, {134, 0x544},
    {135, 0x430}, {136, 0x3AC}, {137, 0x46B}, {138, 0x389},
    {139, 0x7DE}, {140, 0x3CD}, {141, 0x7FD}, {142, 0x0BB},
    {143, 0x60D}, {144, 0x6F9}, {145, 0x61A}, {146, 0x7EA},
    {147, 0x798}, {148, 0x75A}, {149, 0x3C7}, {150, 0x5D1},
	{151, 0x541}, {152, 0x6B9}, {153, 0x71E}, {154, 0x33C},
	{155, 0x498}, {156, 0x377}, {157, 0x664}, {158, 0x476},
	{159, 0x6BB}, {160, 0x55E}, {161, 0x340}, {162, 0x4A0},
	{163, 0x1DE}, {164, 0x65D}, {165, 0x3D2}, {166, 0x32C},
	{167, 0x2CD}, {168, 0x50A}, {169, 0x31A}, {170, 0x459},
	{171, 0x750}, {172, 0x5D2}, {173, 0x4F3}, {174, 0x779},
	{175, 0x53B}, {176, 0x719}, {177, 0x146}, {178, 0x1E4},
	{179, 0x5E3}, {180, 0x554}, {181, 0x5B4}, {182, 0x28B},
	{183, 0x226}, {184, 0x594}, {185, 0x4D4}, {186, 0x48C},
	{187, 0x02C}, {188, 0x44E}, {189, 0x43A}, {190, 0x6F0},
	{191, 0x7C5}, {192, 0x331}, {193, 0x7BD}, {194, 0x443},
	{195, 0x46A}, {196, 0x75B}, {197, 0x357}, {198, 0x22C},
	{199, 0x3B5}, {200, 0x643}, {201, 0x64B}, {202, 0x4D3},
	{203, 0x2B2}, {204, 0x530}, {205, 0x76C}, {206, 0x6E4},
	{207, 0x4B5}, {208, 0x679}, {209, 0x112}, {210, 0x2DE}
};

//Tables for AFS-Q
const std::unordered_map<int, std::pair<int, int>> afs_q_primary_weil_parameters = {
    {1,   {5111,   412}}, {2,   {5109,   161}}, {3,   {5108,    1}}, {4,   {5106,   303}},
    {5,   {5103,   207}}, {6,   {5101,  4971}}, {7,   {5100, 4496}}, {8,   {5098,     5}},
    {9,   {5095,  4557}}, {10,  {5094,   485}}, {11,  {5093,  253}}, {12,  {5091,  4676}},
    {13,  {5090,     1}}, {14,  {5081,    66}}, {15,  {5080, 4485}}, {16,  {5069,   282}},
    {17,  {5068,   193}}, {18,  {5054,  5211}}, {19,  {5044,  729}}, {20,  {5027,  4848}},
    {21,  {5026,   982}}, {22,  {5014,  5955}}, {23,  {5004, 9805}}, {24,  {4980,   670}},
    {25,  {4915,   464}}, {26,  {4909,    29}}, {27,  {4893,  429}}, {28,  {4885,   394}},
    {29,  {4832,   616}}, {30,  {4824,  9457}}, {31,  {4591, 4429}}, {32,  {3706,  4771}},
    {33,  {5092,   365}}, {34,  {4986,  9705}}, {35,  {4965, 9489}}, {36,  {4920,  4193}},
    {37,  {4917,  9947}}, {38,  {4858,   824}}, {39,  {4847,  864}}, {40,  {4790,   347}},
    {41,  {4770,   677}}, {42,  {4318,  6544}}, {43,  {4126, 6312}}, {44,  {3961,  9804}},
    {45,  {3790,   278}}, {46,  {4911,  9461}}, {47,  {4881,  444}}, {48,  {4827,  4839}},
    {49,  {4795,  4144}}, {50,  {4789,  9875}}, {51,  {4725,  197}}, {52,  {4675,  1156}},
    {53,  {4539,  4674}}, {54,  {4535, 10035}}, {55,  {4458, 4504}}, {56,  {4197,     5}},
    {57,  {4096,  9937}}, {58,  {3484,   430}}, {59,  {3481,    5}}, {60,  {3393,   355}},
    {61,  {3175,   909}}, {62,  {2360,  1622}}, {63,  {1852, 6284}}, {64,  {5065,  9429}},
    {65,  {5063,    77}}, {66,  {5055,   932}}, {67,  {5012, 5973}}, {68,  {4981,   377}},
    {69,  {4952, 10000}}, {70,  {4934,   951}}, {71,  {4932, 6212}}, {72,  {4786,   686}},
    {73,  {4762,  9352}}, {74,  {4640,  5999}}, {75,  {4601, 9912}}, {76,  {4563,  9620}},
    {77,  {4388,   635}}, {78,  {3820,  4951}}, {79,  {3687, 5453}}, {80,  {5052,  4658}},
    {81,  {5051,  4800}}, {82,  {5047,    59}}, {83,  {5039,  318}}, {84,  {5015,   571}},
    {85,  {5005,   565}}, {86,  {4984,  9947}}, {87,  {4975, 4654}}, {88,  {4974,   148}},
    {89,  {4972,  3929}}, {90,  {4962,   293}}, {91,  {4913,  178}}, {92,  {4907, 10142}},
    {93,  {4903,  9683}}, {94,  {4833,   137}}, {95,  {4778,  565}}, {96,  {4721,    35}},
    {97,  {4661,  5949}}, {98,  {4660,     2}}, {99,  {4655, 5982}}, {100, {4623,   825}},
    {169, {3082,   427}}, {170, {3072,   367}}, {171, {3032, 1404}}, {172, {3030,  5652}},
    {173, {4582,     5}}, {174, {4595,   368}}, {175, {4068,  451}}, {176, {4871,  9595}},
    {177, {4514,  1030}}, {178, {4439,  1324}}, {179, {4122,  692}}, {180, {4948,  9819}},
    {181, {4774,  4520}}, {182, {3923,  9911}}, {183, {3411,  278}}, {184, {4745,   642}},
    {185, {4195,  6330}}, {186, {4897,  5508}}, {187, {3047, 1872}}, {188, {4185,  5445}},
    {189, {4354, 10131}}, {190, {5077,   422}}, {191, {4042, 4918}}, {192, {2111,   787}},
    {193, {4311,  9864}}, {194, {5024,  9753}}, {195, {4352, 9859}}, {196, {4678,   328}},
    {197, {5034,     1}}, {198, {5085,  4733}}, {199, {3646,  164}}, {200, {4868,   135}},
    {201, {3668,   174}}, {202, {4211,   132}}, {203, {2883,  538}}, {204, {2850,   176}},
    {205, {2815,   198}}, {206, {2542,   595}}, {207, {2492,  574}}, {208, {2376,   321}},
    {209, {2036,   596}}, {210, {1920,   491}}
};

//AFS-Q Weil Index(k)
const std::unordered_map<int, int> afs_q_trietary_weil_parameters = {
    {1,     1}, {2,   229}, {3,   237}, {4,   241}, {5,   253}, {6,   254}, {7,   255}, {8,   256}, {9,   257}, {10,  267},
    {11,  276}, {12,  283}, {13,  301}, {14,  319}, {15,  327}, {16,  328}, {17,  333}, {18,  334}, {19,  335}, {20,  339},
    {21,  340}, {22,  346}, {23,  347}, {24,  350}, {25,  354}, {26,  356}, {27,  357}, {28,  361}, {29,  364}, {30,  365},
    {31,  366}, {32,  368}, {33,  373}, {34,  378}, {35,  381}, {36,  382}, {37,  383}, {38,  384}, {39,  386}, {40,  387},
    {41,  389}, {42,  390}, {43,  394}, {44,  397}, {45,  398}, {46,  400}, {47,  401}, {48,  407}, {49,  408}, {50,  414},
    {51,  415}, {52,  416}, {53,  426}, {54,  431}, {55,  432}, {56,  433}, {57,  436}, {58,  437}, {59,  438}, {60,  439},
    {61,  440}, {62,  441}, {63,  447}, {64,  448}, {65,  449}, {66,  450}, {67,  451}, {68,  459}, {69,  460}, {70,  461},
    {71,  463}, {72,  467}, {73,  468}, {74,  469}, {75,  471}, {76,  474}, {77,  475}, {78,  477}, {79,  480}, {80,  481},
    {81,  485}, {82,  487}, {83,  488}, {84,  489}, {85,  490}, {86,  491}, {87,  492}, {88,  495}, {89,  496}, {90,  498},
    {91,  500}, {92,  502}, {93,  507}, {94,  509}, {95,  510}, {96,  513}, {97,  515}, {98,  517}, {99,  520}, {100, 521},
    {101, 524}, {102, 525}, {103, 526}, {104, 527}, {105, 528}, {106, 529}, {107, 531}, {108, 533}, {109, 538}, {110, 540},
    {111, 542}, {112, 543}, {113, 544}, {114, 549}, {115, 551}, {116, 552}, {117, 553}, {118, 554}, {119, 555}, {120, 556},
    {121, 557}, {122, 562}, {123, 568}, {124, 570}, {125, 573}, {126, 574}, {127, 575}, {128, 576}, {129, 577}, {130, 578},
    {131, 579}, {132, 580}, {133, 582}, {134, 586}, {135, 591}, {136, 592}, {137, 594}, {138, 595}, {139, 596}, {140, 597},
    {141, 598}, {142, 599}, {143, 601}, {144, 604}, {145, 605}, {146, 606}, {147, 607}, {148, 608}, {149, 609}, {150, 610},
    {151, 612}, {152, 616}, {153, 617}, {154, 618}, {155, 619}, {156, 621}, {157, 622}, {158, 627}, {159, 628}, {160, 631},
    {161, 633}, {162, 635}, {163, 638}, {164, 639}, {165, 640}, {166, 645}, {167, 647}, {168, 648}, {169, 649}, {170, 650},
    {171, 651}, {172, 654}, {173, 656}, {174, 658}, {175, 660}, {176, 661}, {177, 662}, {178, 665}, {179, 668}, {180, 669},
    {181, 671}, {182, 674}, {183, 675}, {184, 676}, {185, 678}, {186, 680}, {187, 682}, {188, 683}, {189, 684}, {190, 686},
    {191, 687}, {192, 688}, {193, 689}, {194, 690}, {195, 691}, {196, 697}, {197, 698}, {198, 702}, {199, 705}, {200, 707},
    {201, 710}, {202, 716}, {203, 717}, {204, 718}, {205, 720}, {206, 722}, {207, 723}, {208, 725}, {209, 726}, {210, 729}
};

};




#endif